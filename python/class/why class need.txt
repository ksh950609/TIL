클래스는 왜 필요한가?
프로그래머들이 가장 많이 사용하는 프로그래밍 언어 중 하나인 C 언어에는 클래스가 없다. 이 말은 굳이 클래스가 없어도 프로그램을 충분히 만들 수 있다는 뜻이다. 파이썬으로 잘 만든 프로그램을 살펴봐도 클래스를 사용하지 않고 작성한 것이 매우 많다. 즉, 클래스는 지금까지 공부한 함수나 자료형처럼 프로그램 작성을 위해 꼭 필요한 요소는 아니다.

하지만 프로그램을 작성할 때 클래스를 적재적소에 사용하면 프로그래머가 얻을 수 있는 이익은 많다. 예제를 통해 한번 생각해 보자.


계산기 프로그램을 만들며 클래스 알아보기
여러분 모두 계산기를 사용해 보았을 것이다. 계산기에 숫자 3을 입력하고 +를 입력한 후 4를 입력하면 결괏값으로 7을 보여 준다. 다시 한번 +를 입력한 후 3을 입력하면 기존 결괏값 7에 3을 더해 10을 보여 준다. 즉, 계산기는 이전에 계산한 결괏값을 항상 메모리 어딘가에 저장하고 있어야 한다.


class Calculator:
  def __init__(self):
      self.result = 0

  def add(self, num):
      self.result += num
      return self.result

  def div(self, num):
      if num != 0:
          self.result /= num
      else:
          return "Error: Division by zero"
      return self.result

  def mul(self, num):
      self.result *= num
      return self.result

  def select(self, operation, num):
      if operation == 'add':
          return self.add(num)
      elif operation == 'div':
          return self.div(num)
      elif operation == 'mul':
          return self.mul(num)
      else:
          return "Error: Unsupported operation"

# Create calculator instances
cal1 = Calculator()
cal2 = Calculator()

# Function to handle user input and perform operations
def perform_operations(calculator):
  while True:
      operation = input("Enter operation (add, div, mul) or 'exit' to stop: ").strip()
      if operation == 'exit':
          break
      try:
          num = float(input("Enter number: "))
      except ValueError:
          print("Invalid number, please try again.")
          continue

      result = calculator.select(operation, num)
      print(f"Result: {result}")

# Using cal1
print("Using calculator 1:")
perform_operations(cal1)

# Using cal2
print("Using calculator 2:")
perform_operations(cal2)
